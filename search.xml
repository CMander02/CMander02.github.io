<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>老乡鸡菜谱</title>
      <link href="/posts/52616.html"/>
      <url>/posts/52616.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>2024年4月8日中午开始，安徽、江苏地区知名连锁中式快餐品牌<a href="https://weibo.com/n/老乡鸡">老乡鸡</a>开始连续发布微博，爆料其《老乡鸡菜品溯源报告》中的各项餐饮信息，如加工方式占比、原料来源、餐厅操作工艺、供应商等，后续更是在Gitee上将这份内部报告“开源”，内容翔实丰富，大量信息公开，在网络上引起了不小的讨论热度。</p><p>Gitee仓库在<a href="https://gitee.com/lxjchina/traceability-report-of-dishes?_from=gitee_search">这里</a>，溯源报告下载链接在<a href="https://gitee.com/lxjchina/traceability-report-of-dishes/releases/download/V1.0/%E8%80%81%E4%B9%A1%E9%B8%A1%E8%8F%9C%E5%93%81%E6%BA%AF%E6%BA%90%E6%8A%A5%E5%91%8A2024-04-02.pdf">这里</a>。</p><p>作者认为，</p><ol><li>公开菜谱、精确到克的食材表，和详尽的烹饪流程，为网友和社会提供了一份异常丰富的菜谱。标准化的制作流程为复现和调整提供了非常多的操作空间；</li><li>公开详细的供应商、供应链信息、供应指标，为餐饮行业尤其是一些中小规模的餐馆提供了一份很不错的采购参考单。而且他自己有成型的供应链也完全不惧怕同行的后发威胁。</li><li>我多了一份超级详细的当代安徽-江苏口味的菜谱！安徽口味重油盐，适当减配后刚好适合我。</li></ol><p>一些网友把报告中的菜谱单独整理成仓库，我<a href="https://github.com/CMander02/CookLikeHOC">Fork了一份</a>。本文整理成网页索引形式，方便后续查找。正文部分的标题和菜名【菜名暂时不行】均可点击。</p><h1 id="主食"><a href="#主食" class="headerlink" title="主食"></a><a href="https://github.com/CMander02/CookLikeHOC/tree/main/主食">主食</a></h1><ul><li>大大大块牛面</li><li>大排面</li><li>大盘肥肠鸡手工面</li><li>杂粮饭</li><li>浓香整块鸡汤面</li><li>炸鸡腿时蔬面</li><li>特色鸡汤馄饨</li><li>番茄鸡蛋面</li><li>砂锅荠菜鲜肉馄饨</li><li>米饭</li><li>素面</li><li>老鸡扬米面</li><li>肥西老母鸡汤面</li><li>雪菜肉丝面</li><li>香菇鸡汤面</li><li>香辣牛肉面</li><li>香辣鸡丁拌面<h1 id="凉拌"><a href="#凉拌" class="headerlink" title="凉拌"></a><a href="https://github.com/CMander02/CookLikeHOC/tree/main/凉拌">凉拌</a></h1></li><li>凉拌莴笋丝</li><li>口水鸡</li><li>柠檬凤爪</li><li>西芹花生米<h1 id="卤菜"><a href="#卤菜" class="headerlink" title="卤菜"></a><a href="https://github.com/CMander02/CookLikeHOC/tree/main/卤菜">卤菜</a></h1></li><li>卤大排</li><li>卤方干</li><li>卤翅根</li><li>卤鸡爪</li><li>卤鸡腿</li><li>嗨嗨桶(红油串串)<h1 id="早餐"><a href="#早餐" class="headerlink" title="早餐"></a><a href="https://github.com/CMander02/CookLikeHOC/tree/main/早餐">早餐</a></h1></li><li>包子</li><li>小米南瓜粥</li><li>手工春卷</li><li>手工烧麦</li><li>水煮蛋</li><li>牛肉盒</li><li>现炸大油条</li><li>现熬豆粥</li><li>白米粥</li><li>粢饭糕</li><li>花卷</li><li>茶叶蛋</li><li>荠菜鲜肉蒸饺</li><li>蛋饼</li><li>赤豆糊元宵</li><li>酥皮萝卜丝馅饼</li><li>饭团</li><li>馒头</li><li>香酥牛肉饼</li><li>鸡汁汤包<h1 id="汤"><a href="#汤" class="headerlink" title="汤"></a><a href="https://github.com/CMander02/CookLikeHOC/tree/main/汤">汤</a></h1></li><li>竹荪鹿茸菇鸡汤</li><li>老鸡汤</li><li>肥西老母鸡汤（单品）<h1 id="炒菜"><a href="#炒菜" class="headerlink" title="炒菜"></a><a href="https://github.com/CMander02/CookLikeHOC/tree/main/炒菜">炒菜</a></h1></li><li>什锦蛋炒饭</li><li>农家小炒肉（玉耳）</li><li>农家小炒肉（鸡蛋干）</li><li>剁椒木耳炒鸡蛋</li><li>外婆菜妙鸡蛋</li><li>宫保鸡丁</li><li>家常土豆片</li><li>家常小炒</li><li>小炒河虾</li><li>小妙花菜</li><li>小炒面筋</li><li>小炒香干</li><li>小炒鸡丁</li><li>小炒黄牛肉</li><li>毛豆烧土鸡</li><li>油渣大白菜</li><li>清炒春菜</li><li>清炒毛白菜</li><li>清炒油麦菜</li><li>清炒莴笋片</li><li>清炒菜心</li><li>清炒西兰花</li><li>清炒青菜</li><li>生炒上海青</li><li>笋子烧肉</li><li>笋子鸡丁盖饭</li><li>糖醋排骨</li><li>红烧茄子</li><li>肥肠鸡</li><li>胡萝卜炒木耳</li><li>胡萝卜炒肉片</li><li>胡萝卜炒鸡蛋</li><li>芋儿鸡</li><li>芹菜炒香干</li><li>芹菜香干炒肉丝</li><li>莴笋丝炒鸡蛋</li><li>波萝咕咾肉</li><li>菠萝咕咾肉时蔬饭<br>蒜泥菠菜md</li><li>蚕豆炒鸡蛋</li><li>西红柿炒鸡蛋</li><li>贵州风味辣子鸡</li><li>酸辣土豆丝</li><li>酸辣海带丝</li><li>青搬炒豆芽</li><li>青叔炒鸡蛋</li><li>香椿炒鸡蛋</li><li>鱼香肉丝</li><li>鱼香肉丝盖饭<h1 id="炖菜"><a href="#炖菜" class="headerlink" title="炖菜"></a><a href="https://github.com/CMander02/CookLikeHOC/tree/main/炖菜">炖菜</a></h1></li><li>土豆牛腩</li><li>梅干菜凤爪翅</li><li>白菜炖豆腐</li><li>红烧鱼块</li><li>香辣鸡杂</li><li>鸡血汤</li><li>麻婆豆腐<h1 id="炸品"><a href="#炸品" class="headerlink" title="炸品"></a><a href="https://github.com/CMander02/CookLikeHOC/tree/main/炸品">炸品</a></h1></li><li>傲椒风味翅尖</li><li>嗨嗨桶（炸物桶）</li><li>心形鸡排</li><li>手枪大鸡腿</li><li>棒棒虾</li><li>炸鸡排</li><li>炸鸡腿</li><li>生炸大鸡腿</li><li>香脆薯饼</li><li>香芋地瓜丸</li><li>香酥鸡米花</li><li>鸡肉洋葱圈<h1 id="烤类"><a href="#烤类" class="headerlink" title="烤类"></a><a href="https://github.com/CMander02/CookLikeHOC/tree/main/烤类">烤类</a></h1></li><li>烤肠<h1 id="烫菜"><a href="#烫菜" class="headerlink" title="烫菜"></a><a href="https://github.com/CMander02/CookLikeHOC/tree/main/烫菜">烫菜</a></h1></li><li>浇汁西兰花</li><li>特色热干面</li><li>菠菜蛋皮丝</li><li>葱油拌面</li><li>葱油菜心</li><li>葱油菜苔</li><li>香脆木耳</li><li>鸡汤娃娃菜</li><li>麻辣鸡块<h1 id="煮锅"><a href="#煮锅" class="headerlink" title="煮锅"></a><a href="https://github.com/CMander02/CookLikeHOC/tree/main/煮锅">煮锅</a></h1></li><li>冒烤鸭</li><li>嗨嗨锅（泡椒鸡米花米线）</li><li>嗨嗨锅（番茄肥牛锅）</li><li>嗨嗨锅（酸菜鱼米线）</li><li>嗨嗨锅（鲜蔬锅）</li><li>金汤酸菜鱼</li><li>金汤酸菜鱼(大份)<h1 id="砂锅菜"><a href="#砂锅菜" class="headerlink" title="砂锅菜"></a><a href="https://github.com/CMander02/CookLikeHOC/tree/main/砂锅菜">砂锅菜</a></h1></li><li>砂锅三鲜豆腐</li><li>砂锅原味鸡汤米线</li><li>砂锅木瓜</li><li>砂锅泡椒鸡米花米线</li><li>砂锅牛杂煲</li><li>砂锅番茄米线</li><li>砂锅盐焗鸡</li><li>砂锅腐竹</li><li>砂锅蒜蓉粉丝虾</li><li>砂锅酸菜鱼</li><li>酸菜肥肠煲<h1 id="蒸菜"><a href="#蒸菜" class="headerlink" title="蒸菜"></a><a href="https://github.com/CMander02/CookLikeHOC/tree/main/蒸菜">蒸菜</a></h1></li><li>三色虾仁</li><li>农家蒸蛋</li><li>凤爪蒸豆米</li><li>剁椒鱼头</li><li>奥尔良鸡翅</li><li>松糕</li><li>梅菜扣肉</li><li>活珠子</li><li>白切鸡</li><li>秘汁卤肉饭</li><li>竹笋蒸鸡翅</li><li>粉蒸肉</li><li>粗粮盒</li><li>肉饼蒸蛋</li><li>胡萝个牛肉</li><li>葱油鸡</li><li>蒜蓉娃娃菜</li><li>蒜蓉粉丝虾</li><li>虾仁蒸鸡蛋</li><li>蜜汁南瓜</li><li>酱椒蒜香片片鱼</li><li>酱蒸白干</li><li>酱蒸豆腐</li><li>酱香小河虾</li><li>风干牛肉蒸白干</li><li>香肠蒸豆米</li><li>香芋蒸排骨</li><li>香辣血旺</li><li>鸡汁辣鱼<h1 id="配料"><a href="#配料" class="headerlink" title="配料"></a><a href="https://github.com/CMander02/CookLikeHOC/tree/main/配料">配料</a></h1></li><li>三鲜豆腐汤料</li><li>剁椒酱</li><li>剁椒鱼头料</li><li>家常小炒料</li><li>小炒肉调味汁</li><li>小炒肉调料</li><li>油焖茄子料</li><li>炒菜基料</li><li>肥肠鸡酱料</li><li>血旺料</li><li>调味料（小炒鸡丁）</li><li>酱蒸白干料</li><li>风干牛肉酱料</li><li>鸡杂料</li><li>鸡汁辣鱼料</li><li>鸡油料</li><li>鸡翅调料</li><li>麻婆豆腐料<h1 id="饮品"><a href="#饮品" class="headerlink" title="饮品"></a><a href="https://github.com/CMander02/CookLikeHOC/tree/main/饮品">饮品</a></h1></li><li>原味豆浆</li><li>热奶茶</li><li>苹果山楂红茶</li><li>鸡笼香柠檬茶</li></ul>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 美食 </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习实战0-斗蛐蛐预测</title>
      <link href="/posts/59822.html"/>
      <url>/posts/59822.html</url>
      
        <content type="html"><![CDATA[<p>今年（2024年）的明日方舟国服愚人节活动是一个赛博斗蛐蛐活动。活动的玩法是这样的：</p><ol><li>用一套权重流程，从26个兵种中不重复地选出一些种类，数量各异的怪</li><li>生成一个场地地图</li><li>把怪按种类大致均分到两侧，然后让他们大致随机地从两侧的门刷出。</li><li>两侧怪物大致刷出一半到全部时暂停游戏，玩家选边押注。</li><li>怪物继续自然行进，互相攻击。</li><li>双方互相攻击直到一方全部死亡，此时另一方获胜。同时死亡则均判定为获胜。</li></ol><p>这是一个比较经典的活动链接。【我是链接】活动本身很有意思，近战、远程怪有很复杂的循环克制关系，部分刷得很多的怪，比如虫子和狗子，对其刷出的数量非常敏感，更不用提实战中各种逆天走位、卡位和令人窝火的转火。活动本身在社区引起了极大的讨论度，玩家切切实实体会到了当赛博王爷的乐趣。</p><p>兴奋之余我在想，是否能够通过机器学习（深度学习）的手段，在选边押注阶段，就能预测出一局斗蛐蛐的结果？</p><h1 id="问题分析和建模"><a href="#问题分析和建模" class="headerlink" title="问题分析和建模"></a>问题分析和建模</h1><p>机器学习解决实际问题，首先需要明确问题的各种变量，以及这些变量中哪些是能提取的。</p><p>首先最容易统计的数据就是两侧的怪物的种类和各自数量，以及地图的障碍物情况。这些也是游戏直接显示给玩家的。</p><p>其他变量包括但不限于刷怪数量的产生过程、怪从出生点刷出时的分布和先后，怪的走位和索敌等等。</p><p>该问题中，刷怪的权重机制已经有详细的解析【我是链接】，总结一下就是：</p><blockquote><p>单局有权重 $W$，第k种怪的第n只消耗权重 $w(k,n)=w_{k,0}+\Delta w_k$；<br>单局内的各种怪按照一定顺序消耗权重，直到权重耗尽或无法再刷出选定的任意一种怪为止。</p></blockquote><p>但是每局的权重有轻微的浮动，这导致我们不能将其作为一个比较好的变量。</p><p>统计的一千多条数据中，只有极少数地图有障碍物，但是对战局的影响非常大（比如让远程怪从集火射击变成排队送人头），因此决定保留为变量之一。</p><p>另外，刷怪规律、索敌机制、转火机制等在实战中也有很大的影响【咸鱼错题集】，但是出于方便，这里不将它们作为变量。</p><p>因此，本问题建模如下：</p><blockquote><p>使用一个26+1=27维度的向量记录押注界面的情况。前26个维度记录各个兵种对应的怪物数量，第27个特征记录地图情况。</p><p>对于左侧的怪物，兵力按照显示的记录；对于右侧的怪物，兵力按照显示的兵力数乘以&gt;1，其他未出现的兵种记0.</p><p>比如左侧40条狗对右侧1个石头人，则狗一栏记40，石头人记&gt;1，其他未出现的怪物记0.</p><p>若左侧胜，结果记录为0；右侧胜，结果记录为1.</p></blockquote><p>这样我们得到了一个27+1=28列的数据集，问题本身也抽象成了一个二元分类问题。</p><h1 id="数据收集"><a href="#数据收集" class="headerlink" title="数据收集"></a>数据收集</h1><p>本次共收集到1756条对局数据。<br>|数据来源|数据数量|<br>|——-|——-|<br>|<a href="https://www.bilibili.com/video/BV1fH4y1J7Bf/?vd_source=cec4aabd0a68010a18b56ff813a1b965">B站@Encientea</a>|1120|<br>|<a href="https://bbs.nga.cn/read.php?tid=39739893&amp;page=e&amp;forder_by=postdatedesc&amp;rand=768">NGA@喜欢做作业的alien</a>[注]|65|<br>|Discord热心群友|65|<br>|QQ群友<del>帕鲁</del>们|520|<br>|合计|1756|</p><p>[注]</p><ol><li>帖主自己记录了200条数据，我手动转录了前51条（太难受了眼睛疼）</li><li>下面有人跟帖又补了一些数据，不过格式比较抽象，暂时不做录入。</li></ol><p><del>我和一些B站网友交流后觉得可以使用cv直接识别视频和图片以代替人工，奈何参与讨论的网友们没一个人懂cv，只能作罢。</del></p><p>数据都有了那么直接开干吧！<br>整个项目我上传到了 github【链接】</p><h1 id="数据初步分析，主成分分析"><a href="#数据初步分析，主成分分析" class="headerlink" title="数据初步分析，主成分分析"></a>数据初步分析，主成分分析</h1><p>首先容易看出，两侧的胜率基本是一致的（ 左侧胜：右侧胜 = 832 : 805 = 50.82% : 49.18%）。这说明算法随机性足够，我们有理由相信两侧胜率都是50%【提一下卡方检验的值是多少】；同时这也为机器学习的预测准确率划下了大致50%的底线——算法结果总不能不如盲选吧！</p><p>使用PCA方法和t-SNE方法，将数据降到二维，进行可视化分析。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#先看看你的成分</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score, classification_report</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"></span><br><span class="line">file_paths=[<span class="string">&#x27;Data/data_combine_0406.xlsx&#x27;</span>]</span><br><span class="line"><span class="comment">#file_paths=[&#x27;Data/data_0405.xlsx&#x27;,&#x27;Data/data_combine_0405.xlsx&#x27;]</span></span><br></pre></td></tr></table></figure><p><img src="/posts/59822/output.png" alt="图1：PCA方法和t-SNE方法结果"></p><p>可以看到，所有数据全部糊在一起，你中有我我中有你，这意味着：</p><ol><li>数据线性不可分，基于线性模型的机器学习方法无法很好区别0和1；</li><li>数据可能在高维度有复杂结构，这些结构在降低维度后无法清晰展现；</li><li>可能存在噪声和异常值，需要清洗和预处理；但是上面的所有数据都是人肉统计的，基本不会有问题，本条排除；</li><li>本问题使用线性机器学习算法解决不了，需要非线性的核函数或者类似神经网络等算法参与分析。</li></ol><h1 id="机器学习算法的过滤法，嵌入法，包装法"><a href="#机器学习算法的过滤法，嵌入法，包装法" class="headerlink" title="机器学习算法的过滤法，嵌入法，包装法"></a>机器学习算法的过滤法，嵌入法，包装法</h1><blockquote><p>本段使用ChatGPT帮助总结</p></blockquote><p>在二元分类问题中，特征选择是一个重要步骤，它涉及选择对于预测目标变量最有帮助的特征集合。这不仅可以提高模型的性能，还可以减少计算成本并提高模型的可解释性。特征选择方法通常分为三种类型：过滤法（Filter methods）、包装法（Wrapper methods）和嵌入法（Embedded methods）。</p><h2 id="过滤法"><a href="#过滤法" class="headerlink" title="过滤法"></a>过滤法</h2><p>过滤法基于统计测试评价、排序各个特征，并选择得分最高的特征。</p><ul><li>简单好用</li><li>在选择模型前就能完成特征选择。</li><li>适用于早期检验和特征维数非常高的时候</li><li>不需要建立模型（其实就是纯统计方法）</li><li>速度快，计算效率高</li><li>忽略了特征之间的相互作用</li></ul><h2 id="嵌入法"><a href="#嵌入法" class="headerlink" title="嵌入法"></a>嵌入法</h2><p>嵌入法将特征选择过程和模型训练过程结合起来。</p><ul><li>是最常见的特征选择方法</li><li>在模型的训练过程中直接进行特征选择，边训练边摸索特征和目标变量的相互作用。</li><li>更关注模型性能</li><li>速度依赖各种模型本身</li></ul><h2 id="包装法"><a href="#包装法" class="headerlink" title="包装法"></a>包装法</h2><p>包装法根据目标预测模型的性能评估特征子集的好坏。</p><ul><li>依赖于目标预测模型的选取，一切在完成首轮嵌入法的训练后才开始</li><li>计算成本很高，特征子集变化就要重头训练</li><li>数据特征较少的时候，可能会过拟合</li></ul><h1 id="使用过滤法算法进行机器学习"><a href="#使用过滤法算法进行机器学习" class="headerlink" title="使用过滤法算法进行机器学习"></a>使用过滤法算法进行机器学习</h1><blockquote><p>其实可以直接调用scikit包的，回头看jyb的聊天记录补全这部分</p></blockquote><p>说是机器学习，其实是用一些统计方法检验各个特征，比如卡方检验，相关系数排名等。</p><p>使用卡方检验，检验各变量各自和结果的关系</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#卡方检验</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> chi2_contingency</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化一个空的字典来保存每个特征的卡方检验结果</span></span><br><span class="line">chi2_results = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对file_paths列表中的每个文件路径进行遍历</span></span><br><span class="line"><span class="keyword">for</span> file_path <span class="keyword">in</span> file_paths:</span><br><span class="line">    <span class="comment"># 读取数据文件</span></span><br><span class="line">    df = pd.read_excel(file_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历所有的特征列，除了最后一列，因为最后一列是目标变量</span></span><br><span class="line">    <span class="keyword">for</span> feature <span class="keyword">in</span> df.columns[:-<span class="number">1</span>]:</span><br><span class="line">        <span class="comment"># 构建列联表，每个特征与结果的列联表</span></span><br><span class="line">        crosstab = pd.crosstab(df[feature], df[<span class="string">&#x27;结果&#x27;</span>])</span><br><span class="line">        <span class="comment"># 执行卡方检验</span></span><br><span class="line">        chi2, p, dof, expected = chi2_contingency(crosstab)</span><br><span class="line">        <span class="comment"># 将结果保存到字典中</span></span><br><span class="line">        chi2_results[feature] = &#123;<span class="string">&#x27;Chi2&#x27;</span>: chi2, <span class="string">&#x27;p-value&#x27;</span>: p, <span class="string">&#x27;DOF&#x27;</span>: dof&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将卡方检验结果转换成DataFrame</span></span><br><span class="line">chi2_df = pd.DataFrame(chi2_results).T  <span class="comment"># 转置，让特征成为行索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加是否接受原假设列</span></span><br><span class="line">chi2_df[<span class="string">&#x27;是否接受原假设&#x27;</span>] = [<span class="string">&#x27;拒绝&#x27;</span> <span class="keyword">if</span> p_value &gt; <span class="number">0.05</span> <span class="keyword">else</span> <span class="string">&#x27;接受&#x27;</span> <span class="keyword">for</span> p_value <span class="keyword">in</span> chi2_df[<span class="string">&#x27;p-value&#x27;</span>]]</span><br><span class="line">chi2_df_sorted = chi2_df.sort_values(by=<span class="string">&#x27;p-value&#x27;</span>, ascending=<span class="literal">False</span>)</span><br><span class="line">chi2_df_sorted</span><br></pre></td></tr></table></figure><p>结果如下：</p><div><style scoped>    .dataframe tbody tr th:only>of>type {        vertical>align: middle;    }    .dataframe tbody tr th {        vertical>align: top;    }    .dataframe thead th {        text>align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text>align: right;">      <th></th>      <th>Chi2</th>      <th>p>value</th>      <th>DOF</th>      <th>是否接受原假设</th>    </tr>  </thead>  <tbody>    <tr>      <th>窃笑鳄鱼</th>      <td>16.993774</td>      <td>9.312759e>01</td>      <td>27.0</td>      <td>拒绝</td>    </tr>    <tr>      <th>迟钝的持盾者</th>      <td>23.366898</td>      <td>6.651535e>01</td>      <td>27.0</td>      <td>拒绝</td>    </tr>    <tr>      <th>扎人的石头</th>      <td>12.378891</td>      <td>6.501530e>01</td>      <td>15.0</td>      <td>拒绝</td>    </tr>    <tr>      <th>地形</th>      <td>1.033476</td>      <td>5.964631e>01</td>      <td>2.0</td>      <td>拒绝</td>    </tr>    <tr>      <th>劈柴骑士</th>      <td>12.746314</td>      <td>4.675926e>01</td>      <td>13.0</td>      <td>拒绝</td>    </tr>    <tr>      <th>普通的萨卡兹</th>      <td>29.339031</td>      <td>3.954862e>01</td>      <td>28.0</td>      <td>拒绝</td>    </tr>    <tr>      <th>扩音术士</th>      <td>11.608379</td>      <td>3.121206e>01</td>      <td>10.0</td>      <td>拒绝</td>    </tr>    <tr>      <th>责罚者</th>      <td>11.736195</td>      <td>3.030999e>01</td>      <td>10.0</td>      <td>拒绝</td>    </tr>    <tr>      <th>衣架射手</th>      <td>34.319002</td>      <td>1.905669e>01</td>      <td>28.0</td>      <td>拒绝</td>    </tr>    <tr>      <th>冰手术士</th>      <td>29.560922</td>      <td>1.624255e>01</td>      <td>23.0</td>      <td>拒绝</td>    </tr>    <tr>      <th>流鼻涕虫虫</th>      <td>49.284545</td>      <td>1.251712e>01</td>      <td>39.0</td>      <td>拒绝</td>    </tr>    <tr>      <th>"庞贝"</th>      <td>13.485217</td>      <td>9.620966e>02</td>      <td>8.0</td>      <td>拒绝</td>    </tr>    <tr>      <th>弧光武士</th>      <td>24.667377</td>      <td>7.590788e>02</td>      <td>16.0</td>      <td>拒绝</td>    </tr>    <tr>      <th>狗pro</th>      <td>102.831665</td>      <td>6.915172e>02</td>      <td>83.0</td>      <td>拒绝</td>    </tr>    <tr>      <th>保鲜膜骑士</th>      <td>45.770133</td>      <td>6.874858e>02</td>      <td>33.0</td>      <td>拒绝</td>    </tr>    <tr>      <th>迫击炮投弹手</th>      <td>19.579389</td>      <td>5.145374e>02</td>      <td>11.0</td>      <td>拒绝</td>    </tr>    <tr>      <th>镜子机关枪</th>      <td>24.481147</td>      <td>4.004875e>02</td>      <td>14.0</td>      <td>接受</td>    </tr>    <tr>      <th>"火苗与软钢"</th>      <td>33.654900</td>      <td>3.944115e>02</td>      <td>21.0</td>      <td>接受</td>    </tr>    <tr>      <th>拳击宗师</th>      <td>44.841876</td>      <td>3.048136e>02</td>      <td>29.0</td>      <td>接受</td>    </tr>    <tr>      <th>锁链拳手</th>      <td>49.042711</td>      <td>2.750579e>02</td>      <td>32.0</td>      <td>接受</td>    </tr>    <tr>      <th>源石的腿脚</th>      <td>39.807610</td>      <td>1.138487e>02</td>      <td>22.0</td>      <td>接受</td>    </tr>    <tr>      <th>巧克力流星虫虫</th>      <td>68.148374</td>      <td>2.646780e>03</td>      <td>39.0</td>      <td>接受</td>    </tr>    <tr>      <th>奔跑吧!躯壳!</th>      <td>77.447075</td>      <td>1.104612e>04</td>      <td>37.0</td>      <td>接受</td>    </tr>    <tr>      <th>杰斯顿·威廉姆斯</th>      <td>28.933082</td>      <td>8.065927e>06</td>      <td>4.0</td>      <td>接受</td>    </tr>    <tr>      <th>苦难的具象</th>      <td>54.023628</td>      <td>5.139625e>06</td>      <td>16.0</td>      <td>接受</td>    </tr>    <tr>      <th>小寄居蟹</th>      <td>62.668315</td>      <td>7.527878e>07</td>      <td>18.0</td>      <td>接受</td>    </tr>    <tr>      <th>砸人的石头</th>      <td>48.722232</td>      <td>2.571740e>08</td>      <td>7.0</td>      <td>接受</td>    </tr>  </tbody></table></div><p>由上可知拒绝“本兵种对结果没有影响”这个假设，即“本兵种对结果有影响”的兵种共计16个兵种，为上面从“窃笑鳄鱼”到“迫击炮投弹手”这一部分。</p><h1 id="使用嵌入法算法进行机器学习"><a href="#使用嵌入法算法进行机器学习" class="headerlink" title="使用嵌入法算法进行机器学习"></a>使用嵌入法算法进行机器学习</h1><h2 id="初步计算的代码和结果"><a href="#初步计算的代码和结果" class="headerlink" title="初步计算的代码和结果"></a>初步计算的代码和结果</h2><p>这里使用以下机器学习算法进行计算：</p><ol><li>Logistic Regression</li><li>线性SVC</li><li>SVM</li><li>MLP</li><li>GBM (Gradient Boosting Classifier)</li><li>随机森林</li><li>决策树</li></ol><p>首先配置环境与模型参数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#模型与参数</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> LinearSVC</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"><span class="keyword">from</span> sklearn.neural_network <span class="keyword">import</span> MLPClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> GradientBoostingClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用通用的函数处理多个文件和模型</span></span><br><span class="line">models =&#123;</span><br><span class="line">            <span class="string">&#x27;Logistic Regression&#x27;</span>:LogisticRegression(max_iter=<span class="number">100000</span>,random_state=<span class="number">42</span>),</span><br><span class="line">            <span class="string">&#x27;Linear SVC&#x27;</span>:LinearSVC(max_iter=<span class="number">1000000</span>,random_state=<span class="number">42</span>),</span><br><span class="line">            <span class="string">&#x27;SVM with RBF kernel&#x27;</span>:SVC(kernel=<span class="string">&#x27;rbf&#x27;</span>,max_iter=<span class="number">100000</span>,random_state=<span class="number">42</span>),</span><br><span class="line">            <span class="string">&#x27;MLP classifier&#x27;</span>:MLPClassifier(hidden_layer_sizes=(<span class="number">100</span>,), max_iter=<span class="number">10000</span>, activation=<span class="string">&#x27;relu&#x27;</span>, solver=<span class="string">&#x27;adam&#x27;</span>, learning_rate_init=<span class="number">0.01</span>,random_state=<span class="number">42</span>),</span><br><span class="line">            <span class="string">&#x27;Gradient Boosting Machine&#x27;</span>: GradientBoostingClassifier(n_estimators=<span class="number">100</span>, learning_rate=<span class="number">0.1</span>, max_depth=<span class="number">3</span>, random_state=<span class="number">42</span>),</span><br><span class="line">            <span class="string">&#x27;Random Forest&#x27;</span>: RandomForestClassifier(n_estimators=<span class="number">100</span>, random_state=<span class="number">42</span>),</span><br><span class="line">            <span class="string">&#x27;Decision Tree&#x27;</span>: DecisionTreeClassifier(random_state=<span class="number">42</span>)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>使用各个算法时，分为是否使用 k-fold (k=10)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数据预处理和输出，分使用K-Fold和不使用K-Fold两种情况</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> KFold, cross_val_score</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">preprocess_data</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="comment">#加载数据并进行预处理，返回分割后的训练集和测试集</span></span><br><span class="line">    df = pd.read_excel(file_path, engine=<span class="string">&#x27;openpyxl&#x27;</span>)</span><br><span class="line">    X = df.iloc[:, :-<span class="number">1</span>].values  <span class="comment"># 特征</span></span><br><span class="line">    y = df.iloc[:, -<span class="number">1</span>].values   <span class="comment"># 标签</span></span><br><span class="line">    scaler = StandardScaler()</span><br><span class="line">    X_scaled = scaler.fit_transform(X)</span><br><span class="line">    X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=<span class="number">0.2</span>, random_state=<span class="number">42</span>)</span><br><span class="line">    <span class="keyword">return</span> X_train, X_test, y_train, y_test</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train_evaluate_model</span>(<span class="params">X_train, X_test, y_train, y_test, model</span>):</span><br><span class="line">    <span class="comment">#训练模型并评估模型性能</span></span><br><span class="line">    model.fit(X_train, y_train)</span><br><span class="line">    y_pred = model.predict(X_test)</span><br><span class="line">    accuracy = accuracy_score(y_test, y_pred)</span><br><span class="line">    report = classification_report(y_test, y_pred)</span><br><span class="line">    <span class="keyword">return</span> accuracy, report</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">preprocess_data_k_fold</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="comment">#不使用k-fold加载数据并进行预处理</span></span><br><span class="line">    df = pd.read_excel(file_path, engine=<span class="string">&#x27;openpyxl&#x27;</span>)</span><br><span class="line">    X = df.iloc[:, :-<span class="number">1</span>].values  <span class="comment"># 特征</span></span><br><span class="line">    y = df.iloc[:, -<span class="number">1</span>].values   <span class="comment"># 标签</span></span><br><span class="line">    scaler = StandardScaler()</span><br><span class="line">    X_scaled = scaler.fit_transform(X)</span><br><span class="line">    <span class="keyword">return</span> X_scaled, y</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train_evaluate_model_k_fold</span>(<span class="params">X, y, model, n_splits=<span class="number">10</span></span>):</span><br><span class="line">    <span class="comment">#使用K折交叉验证来训练和评估模型</span></span><br><span class="line">    kf = KFold(n_splits=n_splits, shuffle=<span class="literal">True</span>, random_state=<span class="number">42</span>)</span><br><span class="line">    scores = cross_val_score(model, X, y, cv=kf, scoring=<span class="string">&#x27;accuracy&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算平均准确率</span></span><br><span class="line">    average_accuracy = np.mean(scores)  </span><br><span class="line">    <span class="keyword">return</span> average_accuracy, scores</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果，不用k_fold</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">evaluate_models_on_datasets</span>(<span class="params">file_paths, models</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---------------------------------&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> file_path <span class="keyword">in</span> file_paths:</span><br><span class="line">        X_train, X_test, y_train, y_test = preprocess_data(file_path)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;On dataset:&#x27;</span>, file_path)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;---------------------------------&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> model_name, model <span class="keyword">in</span> models.items():</span><br><span class="line">            accuracy, report = train_evaluate_model(X_train, X_test, y_train, y_test, model)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;model_name&#125;</span>&#x27;</span>+<span class="string">&#x27;\&#x27;s accuracy:&#x27;</span>, accuracy)</span><br><span class="line">            <span class="comment">#print(&#x27;Classification Report:&#x27;, report)</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;---------------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果，使用k_fold</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">evaluate_models_on_datasets_k_fold</span>(<span class="params">file_paths, models</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---------------------------------&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> file_path <span class="keyword">in</span> file_paths:</span><br><span class="line">        X, y = preprocess_data_k_fold(file_path)  <span class="comment"># 修改为返回整个数据集</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;On dataset:&#x27;</span>, file_path)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;---------------------------------&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> model_name, model <span class="keyword">in</span> models.items():</span><br><span class="line">            <span class="comment"># 修改为使用K折交叉验证</span></span><br><span class="line">            accuracy, scores = train_evaluate_model_k_fold(X, y, model)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;model_name&#125;</span>&#x27;</span>+<span class="string">&#x27;\&#x27;s accuracy:&#x27;</span>, accuracy)</span><br><span class="line">            <span class="comment">#print(&#x27;Accuracy for each fold:&#x27;, scores)</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;---------------------------------&#x27;</span>)</span><br></pre></td></tr></table></figure></p><p>对数据使用算法吧！<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#不使用k-fold交叉验证</span></span><br><span class="line">evaluate_models_on_datasets(file_paths, models)</span><br><span class="line"><span class="comment">#使用k-fold交叉验证</span></span><br><span class="line">evaluate_models_on_datasets_k_fold(file_paths, models)</span><br></pre></td></tr></table></figure></p><p>结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不使用k-fold</span></span><br><span class="line">---------------------------------</span><br><span class="line">On dataset: Data/data_combine_0406.xlsx</span><br><span class="line">---------------------------------</span><br><span class="line">Logistic Regression<span class="string">&#x27;s accuracy: 0.6951219512195121</span></span><br><span class="line"><span class="string">Linear SVC&#x27;</span>s accuracy: <span class="number">0.6951219512195121</span></span><br><span class="line">SVM <span class="keyword">with</span> RBF kernel<span class="string">&#x27;s accuracy: 0.6859756097560976</span></span><br><span class="line"><span class="string">MLP classifier&#x27;</span>s accuracy: <span class="number">0.676829268292683</span></span><br><span class="line">Gradient Boosting Machine<span class="string">&#x27;s accuracy: 0.676829268292683</span></span><br><span class="line"><span class="string">Random Forest&#x27;</span>s accuracy: <span class="number">0.6951219512195121</span></span><br><span class="line">Decision Tree<span class="string">&#x27;s accuracy: 0.7042682926829268</span></span><br><span class="line"><span class="string">---------------------------------</span></span><br><span class="line"><span class="string"># 使用k-fold</span></span><br><span class="line"><span class="string">---------------------------------</span></span><br><span class="line"><span class="string">On dataset: Data/data_combine_0406.xlsx</span></span><br><span class="line"><span class="string">---------------------------------</span></span><br><span class="line"><span class="string">Logistic Regression&#x27;</span>s accuracy: <span class="number">0.7157601376627263</span></span><br><span class="line">Linear SVC<span class="string">&#x27;s accuracy: 0.709037857249738</span></span><br><span class="line"><span class="string">SVM with RBF kernel&#x27;</span>s accuracy: <span class="number">0.7139346102049977</span></span><br><span class="line">MLP classifie<span class="string">r&#x27;s accuracy: 0.6973664521921292</span></span><br><span class="line"><span class="string">Gradient Boosting Machine&#x27;</span>s accuracy: <span class="number">0.6980547658237318</span></span><br><span class="line">Random Forest<span class="string">&#x27;s accuracy: 0.7316549453838097</span></span><br><span class="line"><span class="string">Decision Tree&#x27;</span>s accuracy: <span class="number">0.6845952416579382</span></span><br><span class="line">---------------------------------</span><br></pre></td></tr></table></figure></p><p>添加一行基础的50%准确率作为对比，各机器学习的方法的Benchmark如下图：</p><p><img src="/posts/59822/benchmark_0.png" alt="各机器学习算法最终胜率比较"></p><p>【说起来你数据后面又新增了一批，记得更新结果；也可以试试把数据翻转后再新粘贴上去康康结果】</p><p>可以看到预测准确率均在70%左右，而且使用k-fold交叉验证后，除了决策树模型，其他模型的预测准确度都上涨了。</p><p>上述算法中，随机森林的预测准确度最高，可能是因为数据中绝大多数特征都是0，而树类算法恰好在稀疏数据上表现良好。</p><p>由于MLP我懒得调参【难蚌，后续记得调】，暂时将随机森林的结果作为标准模型。</p><h2 id="MLP模型的超参数测试"><a href="#MLP模型的超参数测试" class="headerlink" title="MLP模型的超参数测试"></a>MLP模型的超参数测试</h2><blockquote><p>可以问问jyb这个有什么门道不</p></blockquote><p>【待续】<br>【后续：1，MLP调超参数分析；2，深度学习；3，基于机器学习或者深度学习的某种算法的包装法分析；4，结论和程序打包】</p><p>【hexo似乎对makrdown原生的表格语法不支持】<br>【一份markdown语法总结】</p><p>【关于程序打包，记得学一下别人是怎么配置necessaries那个txt单子的】</p><p>【记得整理一下文件夹】</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>【施工中zzz】</p>]]></content>
      
      
      <categories>
          
          <category> ML&amp;DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 明日方舟 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何简单渲染一个彩虹</title>
      <link href="/posts/b4a35d8c.html"/>
      <url>/posts/b4a35d8c.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文参考了我一个学长发在空间的同名项目，和 Philip Laven 教授 (?.?.1933-2.7.2024) 的 <a href="http://www.philiplaven.com/index1.html">The optics of a water drop-Mie scattering and the Debye series</a>。Laven 教授生前和合作者发了不少关于大气光学现象模拟的文章，对虹、霓、日晕等现象做了详尽解释。关于彩虹的主要成果总结在<a href="https://history.siggraph.org/learning/physically-based-simulation-of-rainbows-by-sadeghi-munoz-laven-jarosz-seron-et-al/">Physically Based Simulation of Rainbows</a> 一文。</p></blockquote><h3 id="1-彩虹的物理形成机制"><a href="#1-彩虹的物理形成机制" class="headerlink" title="1. 彩虹的物理形成机制"></a>1. 彩虹的物理形成机制</h3><p>彩虹是大气中的悬浮水珠散射、色散入射的阳光，在人眼中形成的虚像。彩虹形成于太阳向水汽团的延长线上，一般以彩虹圆弧为中心，视角在 40°~42° 的彩虹光线最为强烈。对于这种角度，阳光在水滴中进行一次全反射后偏转射出。</p><p>设空气折射率 $n_{air}$，水折射率 $n_{water}$ ，二者都会随射入的光的波长而变化，即 $n_{air}(\lambda)$，$n_{water}(\lambda)$。太阳光可以近似为平行射入的圆偏振光。默认太阳光沿着 $-x$ 方向入射水滴，入射角为 $\theta_i$，折射角为 $\theta_r$，且假设水滴是一直均匀的，不考虑衍射效应，易知出射光线的折射角也为 $\theta_r$，且和入射光线、所有内反射光线共面。 </p><p><img src="/posts/b4a35d8c/reflect.bmp" alt="图1"><br>图1，内反射k=1时的示意图。k=0，即光线首次接触水滴内表面时的出射光线未画出。</p><p>如上图，光线在水滴中的折射与反射示意图。图中光线在水滴内反射次数 k=1。虽然没有画出，实际在各个水 - 空气界面上均有折射和反射发生。</p><p>假设光线在水滴中内反射 $k$ 次，则光线共计在 2 个空气 - 水界面发生折射，k 个空气 - 水界面反射，总的偏转角度</p><script type="math/tex; mode=display">\Delta_k=2(\theta_i-\theta_r)+k(\pi-2\theta_r)</script><p>其中 $i$ 和 $r$ 满足折射定律</p><script type="math/tex; mode=display">\frac{n_{water}}{n_{air}}=\frac{\sin \theta_r}{\sin \theta_i}</script><p>考虑最后出射的光线的光强，由 Fresnel 公式 <a href="https://baike.baidu.com/item/%E8%8F%B2%E6%B6%85%E8%80%B3%E5%85%AC%E5%BC%8F/9103788">百度百科</a> <a href="https://zh.wikipedia.org/wiki / 菲涅耳方程">维基中文</a>，</p><blockquote><p>对于发生在 $n_1$，$n_2$ 两个界面上的折反射，假设光线从介质 $n_1$ 射入 $n_2$，入射角 $\theta_i$，折射角 $\theta_r$，反射角 $\theta_t$，入射光功率为一个单位，容易得到</p><ol><li><p>反射光 S 偏振部分功率 $R_s=\frac{\sin(\theta_t-\theta_i)}{\sin(\theta_t+\theta_i)}$  (3)</p></li><li><p>反射光 P 偏振部分功率 $R_p=\frac{\tan(\theta_r-\theta_i)}{\tan(\theta_r+\theta_i)}$  (4)</p></li><li><p>对于圆偏振光（即本文情况），$R=(R_s+R_p)/2$  (5)</p></li><li><p>不管什么时候，都有折射光功率 $T=1-R$  (6)</p></li><li><p>折、反射光的振幅和入射光波的比值称为反射率和透射率，通常记为 $r$ 和 $t$，满足 $R=|r|^2, T=\frac{n_2 \cos{\theta_t}}{n_1 \cos{\theta_i}}|t|^2$</p></li></ol></blockquote><p>由上面的式子，对于一条在水滴内反射 $k$ 次的光线，假设入射功率为 $I$，则其最终的功率</p><script type="math/tex; mode=display">I_k=IR T'^k R'</script><p>其中 $R’$, $T’$ 分别为从水中入射空气的光线，在界面上的反射功率和折射功率。</p><p>由此，对于所有入射水珠的光线 $i\in (-\pi/2,\pi/2)$ ，可以求得特定反射次数 $k$ 下的出射光线的方位角 $\alpha_k=\pi+\Delta_k$ 和出射时的功率 $I_k$。</p><p>考虑到水珠是球体，我们需要对上述结果做球面积分。</p><p>设水珠半径为 $R$ ，在 $(\theta,\theta+\Delta\theta)$ 的环带范围内入射的光线，占用入射面积为</p><script type="math/tex; mode=display">dS=R d\theta_i\times 2\pi R\sin \theta_i=2\pi R^2 \sin \theta_i d\theta_i</script><p>这部分光线反射 $k$ 次后出射，其出射方位是 $\alpha_k$，出射总功率为</p>]]></content>
      
      
      <categories>
          
          <category> 物理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 仿真模拟 </tag>
            
            <tag> Mathematica </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Hexo + Buttefly 主题配置个人博客 + 魔改流程记录</title>
      <link href="/posts/1a3a5ff7.html"/>
      <url>/posts/1a3a5ff7.html</url>
      
        <content type="html"><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><p>安装git, Node.js, npm<br>查看是否安装成功：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure></p><h2 id="创建github-pages仓库"><a href="#创建github-pages仓库" class="headerlink" title="创建github pages仓库"></a>创建github pages仓库</h2><p>新建一个仓库，取名为[name].github.io</p><h1 id="基本安装"><a href="#基本安装" class="headerlink" title="基本安装"></a>基本安装</h1><p>新建一个文件夹，比如cmander_site，然后进入之<br>安装Hexo<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g</span><br><span class="line">hexo-cli</span><br></pre></td></tr></table></figure><br>安装完成后初始化和安装所需组件<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init       # 初始化，注意此时文件夹需要是空的</span><br><span class="line">npm install     # 安装组件</span><br></pre></td></tr></table></figure><br>完成后输入经典Hexo三连<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo server</span><br></pre></td></tr></table></figure><br>默认会在<a href="http://localhost:4000">http://localhost:4000</a> 生成一个landscape主题的页面，此时本地博客安装成功。</p><p>拉取butterfly仓库</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>进入 Hexo 文件夹，修改根目录下的_config.yml：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">theme: <span class="title">butterfly</span></span></span><br></pre></td></tr></table></figure></p><p>安装渲染插件<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure></p><p>一个比较推荐的操作是，创建一个_config.buttefly.yml，并复制_config.yml 中的所有内容进去。Hexo 会自动合并二者的内容，并以_config.butterfly.yml 中的内容为优先。未来可以只在_config.buttefly.yml 中配置。</p><p>后文统称 config 文件。</p><blockquote><p>注：不要把_config.yml 删掉</p></blockquote><p>Hexo 常见命令可以参考 <a href="https://cmander02.github.io/posts/bd2b7616.html">这篇文章</a>。</p><p>简单配置一下 config 文件：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">无声之地</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">于无声处且行吟</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">CMander</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span></span><br></pre></td></tr></table></figure></p><h1 id="易用性设置"><a href="#易用性设置" class="headerlink" title="易用性设置"></a>易用性设置</h1><h2 id="为博客文章生成永久链接"><a href="#为博客文章生成永久链接" class="headerlink" title="为博客文章生成永久链接"></a>为博客文章生成永久链接</h2><blockquote><p>参考 Ordis 的文章 <a href="https://www.imbhj.com/posts/b6a99401/">Hexo 博客生成永久链接</a></p></blockquote><p>Hexo 的默认文章链接是形如: year/:month/:day/:title 格式的。这样会导致生成链接的时候 title 生成一大串，如果是中文标题的博客文章就更难受了，而且几乎没有鲁棒性可言。</p><p>因此这里安装一个插件，通过一些方式为每篇文章生成短链接，只要不改变 footer-matter 的 id 值，则文章链接就不会变化。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">## 安装插件</span><br><span class="line">npm install hexo-abbrlink --save</span><br><span class="line"></span><br><span class="line">## 修改 config 文件的 permalink 项</span><br><span class="line"><span class="function">permalink: <span class="title">posts</span>/:<span class="title">abbrlink.html</span>  ## 此处可以自己设置</span></span><br></pre></td></tr></table></figure><p>再在 config 文件下增加以下内容：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## abbrlink config</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span>      <span class="comment">#support crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span>        <span class="comment">#support dec(default) and hex</span></span><br><span class="line">  <span class="attr">drafts:</span> <span class="literal">false</span>   <span class="comment">#(true)Process draft,(false)Do not process draft. false(default)</span></span><br><span class="line">  <span class="comment">## Generate categories from directory-tree</span></span><br><span class="line">  <span class="comment">## depth: the max_depth of directory-tree you want to generate, should &gt; 0</span></span><br><span class="line">  <span class="attr">auto_category:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment">#true(default)</span></span><br><span class="line">    <span class="attr">depth:</span>        <span class="comment">#3(default)</span></span><br><span class="line">    <span class="attr">over_write:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">auto_title:</span> <span class="literal">false</span> <span class="comment">#enable auto title, it can auto fill the title by path</span></span><br><span class="line">  <span class="attr">auto_date:</span> <span class="literal">false</span> <span class="comment">#enable auto date, it can auto fill the date by time today</span></span><br><span class="line">  <span class="attr">force:</span> <span class="literal">false</span> <span class="comment">#enable force mode,in this mode, the plugin will ignore the cache, and calc the abbrlink for every post even it already had abbrlink.</span></span><br></pre></td></tr></table></figure><br>最后每篇文章对应的的链接就很短了。</p><h2 id="配置-Front-matter"><a href="#配置-Front-matter" class="headerlink" title="配置 Front-matter"></a>配置 Front-matter</h2><blockquote><p>参考 Jerry 的文章 <a href="https://butterfly.js.org/posts/dc584b87/">Butterfly 安装文档 (二) 主题页面</a></p></blockquote><p>Front-matter 是 markdown 文件最上方以 —- 分隔的区域，用于指定个别档案的变数。</p><ul><li>Page Front-matter 用于页面配置，如 /_posts/about, /_posts/categories 等页面</li><li>Post Front-matter 用于文章页配置，就是具体的博文。</li></ul><h3 id="如何一劳永逸搞定-Front-matter"><a href="#如何一劳永逸搞定-Front-matter" class="headerlink" title="如何一劳永逸搞定 Front-matter"></a>如何一劳永逸搞定 Front-matter</h3><p>在网站本地根目录下面找到 scaffolds 文件夹，下有 page.md, post.md，按照下面的指示和配置文件修改即可。</p><p>本站使用 mathjax 渲染，因此 katex 不做设置，复制时还请注意。</p><h3 id="Page-Front-matter"><a href="#Page-Front-matter" class="headerlink" title="Page Front-matter"></a>Page Front-matter</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123;title&#125;&#125;</span><br><span class="line">date: &#123;&#123;date&#125;&#125;</span><br><span class="line">type:</span><br><span class="line">updated:</span><br><span class="line">comments:</span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">mathjax: false</span></span><br><span class="line"><span class="emphasis">katex:</span></span><br><span class="line"><span class="emphasis">aside:</span></span><br><span class="line"><span class="emphasis">aplayer:</span></span><br><span class="line"><span class="emphasis">highlight_</span>shrink:</span><br><span class="line"><span class="section">random:</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>栏目</th><th>是否必要？</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>yes</td><td>标题</td></tr><tr><td>date</td><td>yes</td><td>创建日期</td></tr><tr><td>type</td><td>yes</td><td>标签，分类，友链必须配置</td></tr><tr><td>updated</td><td>no</td><td>页面更新日期</td></tr><tr><td>comments</td><td>no</td><td>评论模块，默认 true</td></tr><tr><td>description</td><td>no</td><td>页面描述</td></tr><tr><td>keywords</td><td>no</td><td>页面关键词，用于链接 index 和 category?</td></tr><tr><td>top_img</td><td>no</td><td>页面顶部图片</td></tr><tr><td>mathjax</td><td>no</td><td>使用 mathjax 渲染公式，仅当 config 中 mathjax.per_page:false 时才需要按需配置，默认 false</td></tr><tr><td>katex</td><td>no</td><td>使用 katex 渲染公式，仅当 config 中 katex.per_page:false 时才需要按需配置，默认 false</td></tr><tr><td>aside</td><td>no</td><td>显示侧边栏，默认 true</td></tr><tr><td>aplayer</td><td>no</td><td>在需要的页面加载 aplayer 的 js 和 css</td></tr><tr><td>highlight_shrink</td><td>no</td><td>配置代码框是否展开，默认为 config 中 highlight_shrink 的配置</td></tr><tr><td>random</td><td>no</td><td>友情链接是否随机排序，默认 false</td></tr></tbody></table></div><h3 id="Post-Front-matter"><a href="#Post-Front-matter" class="headerlink" title="Post Front-matter"></a>Post Front-matter</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123;title&#125;&#125;</span><br><span class="line">date: &#123;&#123;date&#125;&#125;</span><br><span class="line">updated:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top<span class="emphasis">_img: true</span></span><br><span class="line"><span class="emphasis">comments:</span></span><br><span class="line"><span class="emphasis">cover:</span></span><br><span class="line"><span class="emphasis">toc:</span></span><br><span class="line"><span class="emphasis">toc_</span>number:</span><br><span class="line">toc<span class="emphasis">_style_</span>simple:</span><br><span class="line">copyright:</span><br><span class="line">copyright<span class="emphasis">_author:</span></span><br><span class="line"><span class="emphasis">copyright_</span>author<span class="emphasis">_href:</span></span><br><span class="line"><span class="emphasis">copyright_</span>url:</span><br><span class="line">copyright<span class="emphasis">_info:</span></span><br><span class="line"><span class="emphasis">mathjax: false</span></span><br><span class="line"><span class="emphasis">katex:</span></span><br><span class="line"><span class="emphasis">aplayer:</span></span><br><span class="line"><span class="emphasis">highlight_</span>shrink:</span><br><span class="line">aside:</span><br><span class="line"><span class="section">abcjs:</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>栏目</th><th>是否必要？</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>yes</td><td>标题</td></tr><tr><td>date</td><td>yes</td><td>创建日期</td></tr><tr><td>updated</td><td>no</td><td>更新日期</td></tr><tr><td>tags</td><td>no</td><td>文章标签</td></tr><tr><td>categories</td><td>no</td><td>文章分类</td></tr><tr><td>keywords</td><td>no</td><td>文章关键词</td></tr><tr><td>description</td><td>no</td><td>文章描述</td></tr><tr><td>top_img</td><td>no</td><td>文章顶部图片</td></tr><tr><td>comments</td><td>no</td><td>评论模块，默认 true</td></tr><tr><td>cover</td><td>no</td><td>文章缩略图，若未设置 top_img 则文章顶部显示缩略图，可设为 false / 图片地址 / 留空</td></tr><tr><td>toc</td><td>no</td><td>显示文章目录，默认为设置中的 toc.enable 设置</td></tr><tr><td>toc_number</td><td>no</td><td>显示 toc_number，默认为设置中 toc.number 设置</td></tr><tr><td>toc_style_simple</td><td>no</td><td>显示目录简洁模式</td></tr><tr><td>copyright</td><td>no</td><td>显示文章版权模块，默认为设置中 post_copyright.enable 设置</td></tr><tr><td>copyright_author</td><td>no</td><td>版权模块的 <strong> 作者 </strong></td></tr><tr><td>copyright_author_href</td><td>no</td><td>版权模块的 <strong> 作者链接 </strong></td></tr><tr><td>copyright_url</td><td>no</td><td>版权模块的 <strong> 文章链接 </strong></td></tr><tr><td>copyright_info</td><td>no</td><td>版权模块的 <strong> 版权声明 </strong></td></tr><tr><td>mathjax</td><td>no</td><td>使用 mathjax 渲染公式，仅当 config 中 mathjax.per_page:false 时才需要按需配置，默认 false</td></tr><tr><td>katex</td><td>no</td><td>使用 katex 渲染公式，仅当 config 中 katex.per_page:false 时才需要按需配置，默认 false</td></tr><tr><td>aplayer</td><td>no</td><td>在需要的页面加载 aplayer 的 js 和 css</td></tr><tr><td>highlight_shrink</td><td>no</td><td>配置代码框是否展开，默认为 config 中 highlight_shrink 的配置</td></tr><tr><td>aside</td><td>no</td><td>显示侧边栏，默认 true</td></tr><tr><td>abcjs</td><td>no</td><td>加载 abcjs，仅当设置中 abcjs.perpage:false 时才需要按需配置，默认 false</td></tr></tbody></table></div><h3 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>打开刚才的指令生成的 source/tag/index.md 文件，并按下面格式修改<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签 ## 也可以直接写成 “tags”</span><br><span class="line">date: 2024-04-13 17:02:11</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">orderby: name ## random/name/length</span><br><span class="line"><span class="section">order: 1 ## 1/-1 for ascending/descending</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure></p><h3 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>打开 source/categories/index.md，并按下面格式修改：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2024-04-13 17:07:58</span><br><span class="line"><span class="section">type: &quot;categories&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure></p><h1 id="主题配置（施工中）"><a href="#主题配置（施工中）" class="headerlink" title="主题配置（施工中）"></a>主题配置（施工中）</h1><blockquote><p>参考竹山一叶的 <a href="https://zsyyblog.com/e109555b.html#%E8%AE%BE%E7%BD%AE%E5%AF%BC%E8%88%AA%E6%A0%8F">Hexo 博客 Butterfly 主题配置</a></p><h2 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a>导航栏</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">主页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">归档:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="string">友链:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="string">关于:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br><span class="line">  <span class="string">清单</span> <span class="string">||fas</span> <span class="attr">fa-list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">音乐</span> <span class="string">||</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">电影</span> <span class="string">||</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-video</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">照片</span> <span class="string">||</span> <span class="string">/Gallery/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-images</span></span><br></pre></td></tr></table></figure><h2 id="网站图标和头像"><a href="#网站图标和头像" class="headerlink" title="网站图标和头像"></a>网站图标和头像</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Image</span></span><br><span class="line"><span class="comment"># Favicon</span></span><br><span class="line"><span class="comment">## All of these pictures should place in ./themes/butterfly/source/img</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">/img/favicon.png</span></span><br><span class="line"><span class="comment"># Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">img:</span> <span class="string">/img/avatar.png</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># The banner image of home page</span></span><br><span class="line"><span class="attr">index_img:</span> <span class="string">/img/img.jpg</span></span><br><span class="line"><span class="comment">#background image</span></span><br><span class="line"><span class="attr">background:</span> <span class="string">/img/bg.jpg</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="字数统计（有误）"><a href="#字数统计（有误）" class="headerlink" title="字数统计（有误）"></a>字数统计（有误）</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_meta:</span></span><br><span class="line">  <span class="attr">page:</span> <span class="comment"># Home Page</span></span><br><span class="line">    <span class="attr">date_type:</span> <span class="string">both</span> <span class="comment"># created or updated or both 主頁文章日期是創建日或者更新日或都顯示</span></span><br><span class="line">    <span class="attr">date_format:</span> <span class="string">date</span> <span class="comment"># date/relative 顯示日期還是相對日期</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">true</span> <span class="comment"># true or false 主頁是否顯示分類</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">true</span> <span class="comment"># true or false 主頁是否顯示標籤</span></span><br><span class="line">    <span class="attr">label:</span> <span class="literal">true</span> <span class="comment"># true or false 顯示描述性文字</span></span><br><span class="line">    <span class="comment"># add</span></span><br><span class="line">    <span class="comment"># 首页是否开启字数统计</span></span><br><span class="line">    <span class="attr">wordcount_enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 首页是否显示开启阅读数量</span></span><br><span class="line">    <span class="attr">page_pv:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="Hexo-使用-Mathjax引擎渲染数学公式"><a href="#Hexo-使用-Mathjax引擎渲染数学公式" class="headerlink" title="Hexo 使用 Mathjax引擎渲染数学公式"></a>Hexo 使用 Mathjax引擎渲染数学公式</h1><blockquote><p>参考了<a href="https://mercer5.github.io/2021/10/31/hexo渲染数学公式%2f">Hexo渲染数学公式</a>一文</p><h2 id="更换渲染引擎"><a href="#更换渲染引擎" class="headerlink" title="更换渲染引擎"></a>更换渲染引擎</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 卸载原来的</span><br><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line"># 安装新的</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><h2 id="配置引擎"><a href="#配置引擎" class="headerlink" title="配置引擎"></a>配置引擎</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> [root_file]/node_modules/kramed/lib/rules/inline.js</span><br></pre></td></tr></table></figure><p>更改原本的11行和20行<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//11    escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/,</span></span><br><span class="line"><span class="attr">escape</span>: <span class="regexp">/^\\([`*\[\]()#$+\-.!_&gt;])/</span>,</span><br><span class="line"><span class="comment">//20    em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span></span><br><span class="line">    <span class="attr">em</span>: <span class="regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="在主题中开启Mathjax"><a href="#在主题中开启Mathjax" class="headerlink" title="在主题中开启Mathjax"></a>在主题中开启Mathjax</h2><p>config文件中新增：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MathJax Support</span></span><br><span class="line"><span class="attr">mathjax:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">false</span> <span class="comment">##不需要每页都开，需要的时候在post的header打开即可，默认关闭以加速网页</span></span><br></pre></td></tr></table></figure></p><h2 id="在文章中使用Mathjax"><a href="#在文章中使用Mathjax" class="headerlink" title="在文章中使用Mathjax"></a>在文章中使用Mathjax</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">xxx</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2016-12-28 21:01:30</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="literal">true</span> <span class="comment">##需要用的文章在Post header中把这个设置为true，前面默认设置为false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h1 id="配置本地搜索"><a href="#配置本地搜索" class="headerlink" title="配置本地搜索"></a>配置本地搜索</h1><blockquote><p>参考<a href="https://yuqi.fun/posts/f2a576c2.html">Butterfly主题添加本地搜索功能</a></p></blockquote><p>安装搜索引擎<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><br>_config.butterfly.yml 新增<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Local search</span><br><span class="line"><span class="function">local_search:</span></span><br><span class="line"><span class="function">  <span class="title">enable</span>: <span class="title">true</span></span></span><br><span class="line"><span class="function">  # <span class="title">Preload</span> <span class="title">the</span> <span class="title">search</span> <span class="title">data</span> <span class="title">when</span> <span class="title">the</span> <span class="title">page</span> <span class="title">loads</span>.</span></span><br><span class="line"><span class="function">  <span class="title">preload</span>: <span class="title">false</span></span></span><br><span class="line"><span class="function">  # <span class="title">Show</span> <span class="title">top</span> <span class="title">n</span> <span class="title">results</span> <span class="title">per</span> <span class="title">article</span>, <span class="title">show</span> <span class="title">all</span> <span class="title">results</span> <span class="title">by</span> <span class="title">setting</span> <span class="title">to</span> -1</span></span><br><span class="line"><span class="function">  <span class="title">top_n_per_article</span>: 1</span></span><br><span class="line"><span class="function">  # <span class="title">Unescape</span> <span class="title">html</span> <span class="title">strings</span> <span class="title">to</span> <span class="title">the</span> <span class="title">readable</span> <span class="title">one</span>.</span></span><br><span class="line"><span class="function">  <span class="title">unescape</span>: <span class="title">false</span></span></span><br><span class="line"><span class="function">  <span class="title">CDN</span>:</span></span><br></pre></td></tr></table></figure><br>_config.yml 新增<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 添加本地搜索</span><br><span class="line"><span class="function">search:</span></span><br><span class="line"><span class="function">  <span class="title">path</span>: <span class="title">search.xml</span></span></span><br><span class="line"><span class="function">  <span class="title">field</span>: <span class="title">post</span></span></span><br><span class="line"><span class="function">  <span class="title">content</span>: <span class="title">true</span></span></span><br><span class="line"><span class="function">  <span class="title">format</span>: <span class="title">html</span></span></span><br></pre></td></tr></table></figure></p><h1 id="Hexo-引入访问者地图（施工中）"><a href="#Hexo-引入访问者地图（施工中）" class="headerlink" title="Hexo 引入访问者地图（施工中）"></a>Hexo 引入访问者地图（施工中）</h1><blockquote><p>参考<a href="https://blog.csdn.net/cungudafa/article/details/105925710">hexo(butterfly)加入clustrmaps访问者地图</a><br>注意，本地图是按照ip地址定位的<br>似乎需要先完成侧栏选项卡的额外配置，本配置暂缓</p><h2 id="从第三方网站获取地图代码"><a href="#从第三方网站获取地图代码" class="headerlink" title="从第三方网站获取地图代码"></a>从第三方网站获取地图代码</h2><p>在<a href="https://clustrmaps.com/">clustrmaps官网</a>注册账号，在下面找到website widget，输入 Github Pages 网址，点击 Get Map Widget。</p></blockquote><p>网站提供平面地图 Map Widget 和 球形地图 Globe Widget，这里选择球形地图。</p><p>点击 Select，就创建好了。之后只需要复制到博客就行。</p><h2 id="引入至-Hexo"><a href="#引入至-Hexo" class="headerlink" title="引入至 Hexo"></a>引入至 Hexo</h2><p>我选择引入到 butterfly(pug) 的侧边栏。其他主题似乎更简单。</p><ol><li>在config文件中新建</li></ol><h1 id="Hexo插入少量图片"><a href="#Hexo插入少量图片" class="headerlink" title="Hexo插入少量图片"></a>Hexo插入少量图片</h1><blockquote><p>参考<a href="https://blog.csdn.net/as3522/article/details/102972473">Hexo不显示图片,不需要插件,超简单</a></p></blockquote><p>对于不同位置的图片，建议使用不同方法存放和引用。</p><h2 id="文章内图片：安装特定依赖，不同文件夹分别存放"><a href="#文章内图片：安装特定依赖，不同文件夹分别存放" class="headerlink" title="文章内图片：安装特定依赖，不同文件夹分别存放"></a>文章内图片：安装特定依赖，不同文件夹分别存放</h2><p>config 和config.butterfly修改：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># post_asset_folder: false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><br>然后安装依赖 hexo-asset-image<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure></p><p>此时重新在命令行执行hexo n “blabla”的时候，会在_posts下面生成一个同名文件夹。图片放在里面即可，引用时按照下面的语法即可<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">图片名</span>](<span class="link">文件夹名/图片名.后缀</span>)</span><br></pre></td></tr></table></figure></p><h2 id="文章头图：直接丢到source下面"><a href="#文章头图：直接丢到source下面" class="headerlink" title="文章头图：直接丢到source下面"></a>文章头图：直接丢到source下面</h2><p>在source下面新建一个专门存放图片的文件夹，比如pic。将图片存放进去，然后如下正常使用markdown语法引用即可。注意一定是/pic起手，不要丢斜杠。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">img</span>](<span class="link">/pic/xxx.png</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记1 - 罗素茶壶，科学方法论，李约瑟之问</title>
      <link href="/posts/b869154d.html"/>
      <url>/posts/b869154d.html</url>
      
        <content type="html"><![CDATA[<p>这个系列，旨在将各处看到的杂七杂八的东西进行摘抄、记录，并将思考的过程简单记述下来。</p><blockquote><p>会使用包括ChatGPT等LLM帮助理解和生成解释</p></blockquote><h1 id="罗素茶壶"><a href="#罗素茶壶" class="headerlink" title="罗素茶壶"></a><a href="https://zh.wikipedia.org/wiki/羅素的茶壺">罗素茶壶</a></h1><p><strong>罗素茶壶</strong> (Russell’s Teapot)，又称天体茶壶 (Celestial Teapot)，是哲学家罗素塑造的一个类比概念，旨在说明，举证责任应该在那些提出不可知论的宣称的人身上，特别是宗教情况下。</p><p>罗素在文章 <a href="https://www.cfpf.org.uk/articles/religion/br/br_god.html">《神存在吗？》</a> 中说，</p><blockquote><p>许多正统派基督教人士认为应该由怀疑者来证伪那些受公认的教条，而不是由那些教条主义者来证实它们。这当然是错误的。如果我说，地球和火星之间有个瓷制茶壶以椭圆轨道绕太阳公转，只要我小心地补充说明这茶壶实在太小，即使用我们最强大的望远镜也找不到它，那么没有人可以证伪我的主张。但如果我要声明道，既然我的声明无法被推翻，那么向它提出怀疑对人类理性来说就是不可容忍的，我自然应当被看作在胡言乱语。但假设这茶壶的存在被古书所支持，并在每个星期日以神圣真理的形式教导给大众，灌输到每个在校孩童的心智中，那怀疑茶壶存在的人会被当作反常的特征，怀疑者在启蒙时代会受精神科医师注意，在更早的时代中则会被视为异端而受审判。</p></blockquote><p>这个观点在现代发展成为了诸如 “飞天意面神教” 的宗教戏仿形式，意在指出，证明上帝存在的举证责任在信徒，而非无神论者。</p><ol><li>分析<br> 罗素的这个说法其实不止于宗教，其含义其实是：<blockquote><p>任何人都没有反证断言的责任</p></blockquote></li><li><p>和奥卡姆剃刀的联系和区别<br> 奥卡姆剃刀指的是 “如无必要，勿增实体”，或者说，</p><blockquote><p>讨论的基础应当是相对简单的、包含论断较少的理论</p></blockquote><p> 罗素茶壶和奥卡姆剃刀都推崇简化思考方式，避免冗杂的复杂性。但是奥卡姆剃刀更是一种方法论，用于指导如何形成理论和假设；而罗素茶壶更多用于批判宗教领域或者超自然的信仰，其批判要素更高，而指导作用相对有限。</p></li></ol><h1 id="近代科学方法论的发展杂记"><a href="#近代科学方法论的发展杂记" class="headerlink" title="近代科学方法论的发展杂记"></a>近代科学方法论的发展杂记</h1><p>近代科学方法论上，培根的《新工具》可以算作一个里程碑，之后笛卡尔的理性主义和培根的经验主义以及科学归纳法相结合，奠定了基本的近代科学范式。<br>科学认知有三个问题：</p><ul><li>世界的运行是否存在规律？<br>这个问题在古希腊时期就开始探讨了，比较著名的有柏拉图和亚里士多德等。但是直到17世纪初期，特别是伽利略、开普勒等天文学家的工作，科学开始采用实验和数学模型来揭示自然规律，并在《自然哲学的数学原理》一书得到总结和继续应用。</li><li>如果存在规律，人类能不能认知？<br>这个问题最早的论述也是古希腊时期，但是中间沉寂了很久，中世纪期间甚至有隐隐开历史倒车的迹象；但随着笛卡尔的理性主义和培根的经验主义的发展，科学方法开始强调：人类通过理性思维和感觉经验，可以认知世界的规律。这种观点在十七世纪末至十八世纪初期的启蒙时代得到了进一步的强调和发展。</li><li>如果能够认知，该用什么样的方法来认知？<br>这个问题的解决也是一个渐进的过程，特别是在十七世纪末到十八世纪初，由一系列科学家通过数据的积累、理论和实验手段的发展，对自然现象形成了较为精确的解释（哈雷彗星，《原理》等），这种方法逐渐得到了确立，并成为现代科学的基石。</li></ul><h1 id="“李约瑟之问”可能不是一个很好的问题"><a href="#“李约瑟之问”可能不是一个很好的问题" class="headerlink" title="“李约瑟之问”可能不是一个很好的问题"></a><a href="https://zh.wikipedia.org/wiki/李约瑟难题">“李约瑟之问”</a>可能不是一个很好的问题</h1><p>相关地，我觉得“李约瑟之问”可能不是一个很好的问题，它有将西方打包成一个联系紧密、人员信息互通的整体的嫌疑，哪怕他的简单粗暴的中西方二元划分哪怕在今天都有乍一看的合理性。</p><blockquote><p>“Why did modern science, the mathematization of hypotheses about Nature, with all its implications for advanced technology, take its meteoric rise only in the West at the time of Galileo?”, and why it “had not developed in Chinese civilization” which in the previous many centuries “was much more efficient than occidental in applying” natural knowledge to practical needs? ——<a href="https://en.wikipedia.org/wiki/Joseph_Needham#The_Needham_Question">Wikipedia, Joseph Needham</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 认知 </tag>
            
            <tag> 方法论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nvidia 显卡配置 HDR 和 Tone Mapping</title>
      <link href="/posts/f4a1392c.html"/>
      <url>/posts/f4a1392c.html</url>
      
        <content type="html"><![CDATA[<p>超分辨是通过软硬件增加画面的分辨率和码率的一种手段。本文只介绍 <strong>Windows 操作系统</strong> 基于 <strong>Nvidia 显卡 + MPC-HC64 播放器</strong> 的超分辨方式。</p><h3 id="0-打开-HDR"><a href="#0-打开-HDR" class="headerlink" title="0. 打开 HDR"></a>0. 打开 HDR</h3><ul><li>Windows 设置 - 系统 - 屏幕 - 打开 “使用 HDR”</li><li>设置 - 应用 - 视频播放 - 打开 “自动处理视频以增强其效果”</li><li>Windows 商店下载校色软件，手动校色，保存校色文件。</li></ul><h3 id="1-Nvidia-控制面板开启对应功能"><a href="#1-Nvidia-控制面板开启对应功能" class="headerlink" title="1.Nvidia 控制面板开启对应功能"></a>1.Nvidia 控制面板开启对应功能</h3><p>打开 Nvidia 控制面板，左侧选视频 - 调整视频图像设置 —RTX 视频增强 - 超分辨率，按需勾选质量。一般自动即可。</p><h3 id="2-PotPlayer-设置"><a href="#2-PotPlayer-设置" class="headerlink" title="2.PotPlayer 设置"></a>2.PotPlayer 设置</h3><p>安装 PotPlayer 后，选项 - 视频，</p><ul><li>视频渲改为 “内置 Direct3D 11 视频渲染器”</li><li>尺寸调整选择 “自动选择（推荐）”</li><li>勾选下方的 “D3D11 GPU 超分辨率”<br>保存配置后重启，播放任意视频时，只要视频比起原本的尺寸有放大，就会自动超分辨率。</li></ul><p>20240412 备注：potplayer 已经弃用，目前本地播放器使用 MPC-HC64。</p><h3 id="3-其他未设置"><a href="#3-其他未设置" class="headerlink" title="3. 其他未设置"></a>3. 其他未设置</h3><ul><li><a href="https://docs.google.com/document/d/1OIVKk8njrDTELsIZUrTBod_LdPB1sz9FieK6h1DfzF0/edit">tone mapping</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nvidia </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站待办</title>
      <link href="/posts/64857ec8.html"/>
      <url>/posts/64857ec8.html</url>
      
        <content type="html"><![CDATA[<p>网站待办：</p><ul><li>[x] 添加首页大图</li><li>[ ] 更改各处个人信息和简介，见config_butterfly</li><li>[ ] 个人简介页面未正常生效</li><li>[ ] 之前文章逐步转移</li><li>[x] 调整网站图标</li><li>[x] 兼容katex和mathjax</li><li>[ ] 添加rss</li><li>[ ] _posts/categories 和/_posts/tags无效</li><li>[ ] 子页面头图不能正常生效</li><li>[ ] 文章内图片无法正常生效</li><li>[ ] description未能正常显示</li><li>[ ] 网站自有云（自有仓库），或者也可以通过外链实现</li></ul><p>待完善文章</p><ul><li>[ ] 彩虹</li><li>[ ] 机器学习</li><li>[x] 菜谱</li></ul><p>参考文档：</p><ol><li><a href="https://butterfly.js.org/">https://butterfly.js.org/</a></li><li><a href="https://zsyyblog.com/d9ecae12.html">https://zsyyblog.com/d9ecae12.html</a></li><li><a href="https://dc1y.github.io/blogging-in-hexo-with-vscode/">https://dc1y.github.io/blogging-in-hexo-with-vscode/</a></li><li><a href="https://butterfly.zhheo.com/create.html">https://butterfly.zhheo.com/create.html</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo常见命令</title>
      <link href="/posts/bd2b7616.html"/>
      <url>/posts/bd2b7616.html</url>
      
        <content type="html"><![CDATA[<p>下面是hexo的一些常见命令，放在网站中便于查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g <span class="comment">#安装Hexo</span></span><br><span class="line">npm update hexo -g <span class="comment">#升级</span></span><br><span class="line">hexo init <span class="comment">#初始化博客</span></span><br><span class="line">hexo cl == hexo clean <span class="comment">#清除缓存，若是网页正常情况下可以忽略这条命令</span></span><br><span class="line"></span><br><span class="line">hexo n <span class="string">&quot;我的博客&quot;</span> == hexo new <span class="string">&quot;我的博客&quot;</span> <span class="comment">#新建文章</span></span><br><span class="line">hexo g == hexo generate <span class="comment">#生成</span></span><br><span class="line">hexo s == hexo server <span class="comment">#启动服务预览</span></span><br><span class="line">hexo d == hexo deploy <span class="comment">#部署</span></span><br><span class="line">​</span><br><span class="line">hexo server <span class="comment">#Hexo会监视文件变动并自动更新，无须重启服务器</span></span><br><span class="line">hexo server -s <span class="comment">#静态模式</span></span><br><span class="line">hexo server -p 5000 <span class="comment">#更改端口</span></span><br><span class="line">hexo server -i 192.168.1.1 <span class="comment">#自定义 IP</span></span><br><span class="line"></span><br><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo s <span class="comment">#无脑三连</span></span><br><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo d <span class="comment">#退出三连</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 笔记</title>
      <link href="/posts/b9733a42.html"/>
      <url>/posts/b9733a42.html</url>
      
        <content type="html"><![CDATA[<p>得益于 Markdown 对 html 的兼容性，很多 html 的语法可以直接嵌套进 Markdown 以增加文本的多样性。</p><h2 id="1-Markdown-如何添加文献引用-1"><a href="#1-Markdown-如何添加文献引用-1" class="headerlink" title="1.Markdown 如何添加文献引用 1"></a>1.Markdown 如何添加文献引用 <a href="#ref-anchor-1"><sup>1</sup></a></h2><p>markdown 原生支持超链接，比如</p><p><a href="https://www.mozilla.org/en-US/firefox/new/">这是 Firefox 浏览器的下载页</a></p><p>其格式为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[标题](链接)</span><br></pre></td></tr></table></figure><p>注意，Markdown 只渲染最近的一组方圆括号。本部分最后有示例。<br>接下来可以为上面的内容增加锚点:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;refer-anchor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">[标题](链接)</span><br></pre></td></tr></table></figure><p>点击这个浮起来的蓝色小 test<a href="#refer-anchor"><sup>test</sup></a>，就能自动滚动到锚点所在的的位置。语法如下所示。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="tag">&lt;<span class="name">sup</span>&gt;</span>ref<span class="tag">&lt;/<span class="name">sup</span>&gt;</span>](#id)</span><br></pre></td></tr></table></figure></p><h2 id="2-Markdown-如何生成目录-2"><a href="#2-Markdown-如何生成目录-2" class="headerlink" title="2.Markdown 如何生成目录 2"></a>2.Markdown 如何生成目录 <a href="#ref-anchor-2"><sup>2</sup></a></h2><p>方法 1，非常简单，在文章开头加入<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[TOC]</span><br></pre></td></tr></table></figure><br>就好了，大小写不限，但是需要一致。这样生成的目录包含了 Markdwon 语法里面 1~6 个 # 的所有标题，非常方便。缺点是没有对应文章子部分的链接。</p><p>20240320 更新：Github 和 Gitee 均不支持 toc，建议本地编辑时使用 markdown all in one create table of contents 命令编写目录。</p><p>方法 2，全局安装 doctoc 插件并执行之<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install doctoc -g</span><br><span class="line">cd ./curentfolder</span><br><span class="line">doctoc whateveryouwant.md</span><br></pre></td></tr></table></figure><br>这样可以生成目录链接，更方便跳转，但是需要 npm。</p><h2 id="3-Jekyll-环境下语法高亮"><a href="#3-Jekyll-环境下语法高亮" class="headerlink" title="3.Jekyll 环境下语法高亮"></a>3.Jekyll 环境下语法高亮</h2><p>Jekyll 环境下的 Markdown 文件不能像 Typora 一样有方便的语法高亮，所幸我们还可以这样<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\&#123;\% highlight [language] \%\&#125;</span><br><span class="line">\&#123;\% endhighlight \%\&#125;</span><br></pre></td></tr></table></figure><br>因为 Jekyll 的识别问题，使用时需要删去上面的所有 “\”。</p><h2 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h2><div id="refer-anchor-1"></div><ul><li>[1] <a href="https://blog.csdn.net/u012349679/article/details/103815049">Markdown 添加文献引用</a></li></ul><div id="refer-anchor-2"></div><ul><li>[2] <a href="https://www.cnblogs.com/RainFate/p/15723607.html">markdown 文件生成目录的方式 </a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
